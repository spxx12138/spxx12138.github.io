<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://spxx12138.github.io</id>
    <title>寻欢</title>
    <updated>2020-01-13T14:46:41.335Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://spxx12138.github.io"/>
    <link rel="self" href="https://spxx12138.github.io/atom.xml"/>
    <logo>https://spxx12138.github.io/images/avatar.png</logo>
    <icon>https://spxx12138.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 寻欢</rights>
    <entry>
        <title type="html"><![CDATA[ArrayList与LinkedList 的增删、访问 速度对比实验.md]]></title>
        <id>https://spxx12138.github.io/post/arraylist-yu-linkedlist-de-zeng-shan-fang-wen-su-du-dui-bi-shi-yan-md</id>
        <link href="https://spxx12138.github.io/post/arraylist-yu-linkedlist-de-zeng-shan-fang-wen-su-du-dui-bi-shi-yan-md">
        </link>
        <updated>2020-01-13T14:33:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="arraylist与linkedlist-的增删-访问-速度对比实验">ArrayList与LinkedList 的增删、访问 速度对比实验</h1>
<p>ArrayList基于数组实现，随机访问快，增删慢。<br>
LinkedList是链表结构，增删快，随机访问慢。<br>
<strong><font color = 'red'>这是网络与书籍里随处可见的两句话，但并不是说所有情况下Linked的增删都比ArrayList快</font></strong></p>
<h2 id="随机插入实验">随机插入实验</h2>
<pre><code class="language-java">public static void linkedTest() {
    LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();
    for (int i = 0; i &lt; 100000; i++) {
        linkedList.add((int) (Math.random() * linkedList.size()), 1);
    }
}
public static void arrayTest() {
    ArrayList&lt;Integer&gt; linkedList = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; 100000; i++) {
        linkedList.add((int) (Math.random() * linkedList.size()), 1);
    }
}
</code></pre>
<p>LinkedList 随机插入十万数据用时：15738（15秒）<br>
ArrayList 随机插入十万数据用时：324（0.3秒）</p>
<p>LinkedList 随机插入百万数据用时：8423510（两个半小时）<br>
ArrayList 随机插入百万数据用时：43300（43秒）</p>
<p><strong>LinkedList在每一次插入之前，内部都会使用for循环找到需要插入的位置，这个代价是很大的。ArrayList虽然会将插入位置之后的元素依次后移，但比LinkedList的访问要快。</strong></p>
<h2 id="末尾插入实验">末尾插入实验</h2>
<pre><code class="language-java">public static void linkedTest() {
    LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();
    for (int i = 0; i &lt; 10000000; i++) {
        linkedList.addLast((int) (Math.random() * 1000));
    }
}

public static void arrayTest() {
    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; 10000000; i++) {
        arrayList.add(i, (int) (Math.random() * 1000));
    }
}
</code></pre>
<p>LinkedList尾部插入一百万数据用时：132（零点一秒）<br>
ArrayList尾部插入一百万数据用时：55（零点零五秒）</p>
<p>LinkedList尾部插入一千万数据用时：8994（九秒）<br>
ArrayList尾部插入一千万数据用时：2702（二点七秒）</p>
<p><em><font color='red'>这里有一个疑问，arraylist会自动扩容，那为什么设置了初始长度之后，所用时间反而比没设置、需要多次扩容的用时还长呢</font></em></p>
<p><strong>LinkedList在插入的时候，除了需要创建新节点，还需要更新原来节点的next，使它指向新插入的节点，所以说 即使是在末尾插入并且ArrayList需要动态扩容的情况下，LinkedList速度仍不及ArrayList。</strong></p>
<h2 id="头部插入实验">头部插入实验</h2>
<pre><code class="language-java">public static void linkedTest() {
    LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();
    for (int i = 0; i &lt; 1000000; i++) {
        linkedList.addFirst((int) (Math.random() * 1000));
    }
}

public static void arrayTest() {
    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();
    for (int i = 0; i &lt; 1000000; i++) {
        arrayList.add(0, (int) (Math.random() * 1000));
    }
}
</code></pre>
<p>LinkedList尾部插入一百万数据用时：131（零点一秒）<br>
ArrayList尾部插入一百万数据用时：129945（两分钟）</p>
<p><strong>ArrayList在头部插入，每一次插入都会将后面的所有元素后移一位，效率非常低。LinkedList在数据量相同时，因为是双向链表且不需要移动其他元素，无论在头部还是尾部插入，耗时是一样的。</strong></p>
<h2 id="随机删除">随机删除</h2>
<pre><code class="language-java">public static void linkedTest() {
    LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();
    //插入一百万数据
    for (int i = 0; i &lt; 1000000; i++) {
        linkedList.addLast((int) (Math.random() * 1000));
    }
    Date start = new Date();
    //随机删除一万个，占总容量百分之一
    for (int i = 0; i &lt; 00000; i++) {
        linkedList.remove((int)(Math.random()*100000));
    }
    Date end = new Date();
    System.out.println(&quot;LinkedList随机删除用时：&quot; + (end.getTime() - start.getTime()));
}

public static void arrayTest() {
    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();
    //插入一百万数据
    for (int i = 0; i &lt; 1000000; i++) {
        arrayList.add(arrayList.size(), (int) (Math.random() * 1000));
    }
    Date start = new Date();
    //随机删除一万个，占总容量百分之一
    for (int i = 0; i &lt; 10000; i++) {
        arrayList.remove((int)(Math.random()*100000));
    }
    Date end = new Date();
    System.out.println(&quot;ArrayList随机删除用时：&quot; + (end.getTime() - start.getTime()));
}
</code></pre>
<p>ArrayList随机删除用时：5879（六秒）<br>
LinkedList随机删除用时：3752（四秒）<br>
<em>一千万数据没试，ArrayList删除太慢了，明显高于LinkedList</em><br>
<em><font color='red'>值得一提的是，如果remove传入的不是下标而是对象类型，那么两种类型的list删除都会更慢，ArrayList：18931<br>
LinkedList：79321</font></em><br>
<strong>虽然LinkedList每次删除时都需要获取到删除的位置，但相比于ArrayList的移动元素，仍然是省时的。</strong></p>
<h2 id="遍历删除">遍历删除</h2>
<pre><code class="language-java">public static void linkedTest() {
    LinkedList&lt;Integer&gt; linkedList = new LinkedList&lt;&gt;();
    //插入一百万数据
    for (int i = 0; i &lt; 1000000; i++) {
        linkedList.addLast((int) (Math.random() * 1000));
    }
    Date start = new Date();
    Iterator&lt;Integer&gt; iter = linkedList.iterator();
    while (iter.hasNext()) {
        if ((iter.next() % 2) == 0) {
        	//删除所有偶数
            iter.remove();
        }
    }
    Date end = new Date();
    System.out.println(&quot;LinkedList删除用时：&quot; + (end.getTime() - start.getTime()));
}

public static void arrayTest() {
    ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;&gt;();
    //插入一百万数据
    for (int i = 0; i &lt; 1000000; i++) {
        arrayList.add(arrayList.size(), (int) (Math.random() * 1000));
    }
    Date start = new Date();
    for(int i =0;i&lt;arrayList.size();i++){
        if(arrayList.get(i)%2 == 0){
        	//删除所有偶数
            arrayList.remove(i);
        }
    }
    Date end = new Date();
    System.out.println(&quot;ArrayList删除用时：&quot; + (end.getTime() - start.getTime()));
}
</code></pre>
<p><em>为了防止每次随机插入的数据奇偶数的数目差距过大，所以测试了很多次，耗时基本一致。ArrayList用迭代器遍历更慢</em><br>
ArrayList遍历删除用时：39235（四十秒）<br>
LinkedList遍历删除用时：16（零点零二秒）<br>
<strong>很明显，LinkedList在删除时不需要移动其他元素的优势在此就体现出来了，因为是使用迭代器遍历，在删除时不需要再次寻找该元素，所以速度很快。</strong><br>
<font color='red'>LinkedList的遍历千万不要用for循环get，LinkedList的get方法内部是通过循环找到第i个元素的，这样相当于使用了嵌套循环</font></p>
<p><strong>需要频繁删除或者头部插入的时候，使用LinkedList<br>
在尾部插入，不怎么进行删除操作时，使用ArrayList</strong></p>
]]></content>
    </entry>
</feed>